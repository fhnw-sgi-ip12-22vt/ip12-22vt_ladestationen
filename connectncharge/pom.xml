<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ch.ladestation.connectncharge</groupId>
    <artifactId>ConnectnCharge</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Connect-n-Charge</name>
    <description>
        The game ${project.name} was developed by a team of 8 students at the
        University of Applied Sciences Northwestern Switzerland.
        It was part of the IP12-Project 2022 / 2023.
    </description>

    <organization>
        <name>FHNW | University of Applied Sciences Northwestern Switzerland</name>
        <url>https://www.fhnw.ch/en/startseite</url>
    </organization>
    <developers>
        <developer>
            <roles>
                <role>Usability Manager</role>
                <role>Project Manager</role>
            </roles>
            <name>Marvin Vogel</name>
            <email>marvin.vogel@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>Hardware Developer</role>
                <role>Testing Manager</role>
            </roles>
            <name>Marius Gebhardt</name>
            <email>marius.gebhardt@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>QA</role>
                <role>Usability Manager</role>
            </roles>
            <name>Shenia Scherer</name>
            <email>shenia.scherer@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>Software Architect</role>
                <role>Requirements Engineer</role>
            </roles>
            <name>Alexander Spiridonow</name>
            <email>alexander.spiridonow@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>Requirements Engineer</role>
                <role>Software Developer</role>
            </roles>
            <name>Gabriele Ferrali</name>
            <email>gabriele.ferrali@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>Project Manager</role>
                <role>Information Manager</role>
            </roles>
            <name>Pascal Stich</name>
            <email>pascal.stich@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>QA</role>
            </roles>
            <name>Zeljko Grujic</name>
            <email>zeljko.grujic@students.fhnw.ch</email>
        </developer>
        <developer>
            <roles>
                <role>Information Manager</role>
            </roles>
            <name>Patrick Hernandez</name>
            <email>patrick.hernandez@students.fhnw.ch</email>
        </developer>
    </developers>

    <properties>
        <launcher.class>ch.ladestation.connectncharge/${project.groupId}.AppStarter</launcher.class>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.9.2</junit.version>

        <pi.username>pi</pi.username>
        <pi.password>Ladestation</pi.password>
        <pi.ipnumber>10.175.31.132</pi.ipnumber>
        <pi.port>22</pi.port>
        <pi.deploydirectory>/home/pi/deploy</pi.deploydirectory>

        <pi.remote.jvmOptions/>
        <!-- If a mouse is attached to Pi use 'true' -->
        <pi.drm.enable.cursor>true</pi.drm.enable.cursor>

        <!-- Java Compiler Version -->
        <java.version>17</java.version>

        <!-- Project Dependency Versions-->
        <javafx.version>17.0.2</javafx.version>
        <pi4j.version>2.3.0</pi4j.version>
        <slf4j.version>2.0.7</slf4j.version>
        <junit.version>5.9.0</junit.version>
        <rpi-ws281x-java.version>2.0.0-SNAPSHOT</rpi-ws281x-java.version>

        <!-- Plugin Versions-->
        <javafx.plugin.version>0.0.8</javafx.plugin.version>
        <gluonfx.plugin.version>1.0.15</gluonfx.plugin.version>

        <!-- Maven Plugin Versions -->
        <maven-antrun-plugin.version>3.0.0</maven-antrun-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.2.0</maven-dependency-plugin.version>
        <maven-jar-plugin.version>3.2.1</maven-jar-plugin.version>
        <maven-javadoc-plugin.version>3.5.0</maven-javadoc-plugin.version>
        <exec-maven-plugin.version>3.0.0</exec-maven-plugin.version>

        <!-- Maven Properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- PROJECT ENCODING PROPERTIES -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Ant Dependencies -->
        <ant-jsch.version>1.10.9</ant-jsch.version>

        <!-- gluonfx properties -->
        <app.identifier>${launcher.class}</app.identifier>
        <app.description>RaspPiFX app</app.description>
        <package.type/>
        <mac.app.store/>
        <mac.signing.user.name/>
        <bundle.version/>
        <bundle.short.version/>

        <!-- Checkstyle version -->
        <maven-checkstyle.version>3.2.1</maven-checkstyle.version>
        <checkstyle.version>10.3.4</checkstyle.version>
        <mockito-core.version>5.3.1</mockito-core.version>
        <controlsfx.version>11.1.1</controlsfx.version>
        <bootstrapfx-core.version>0.4.0</bootstrapfx-core.version>
        <maven-shade-plugin.version>3.4.1</maven-shade-plugin.version>
        <javafx-maven-plugin.version>0.0.8</javafx-maven-plugin.version>
        <maven-checkstyle-plugin.version>3.2.1</maven-checkstyle-plugin.version>
        <maven-project-info-reports-plugin.version>3.4.2</maven-project-info-reports-plugin.version>
        <maven-site-plugin.version>4.0.0-M6</maven-site-plugin.version>
        <maven-checkstyle-plugin.excludes>
            **/module-info.java,**/jni/*.java
        </maven-checkstyle-plugin.excludes>
        <maven-javadoc-plugin.excludePackageNames>
            com.github.mbelling.ws281x.jni,org.openjfx
        </maven-javadoc-plugin.excludePackageNames>
        <puppycrawl-tools-checkstyle.version>10.3.4</puppycrawl-tools-checkstyle.version>
        <maven-surefire-plugin.version>3.1.2</maven-surefire-plugin.version>
        <jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>
    </properties>

    <dependencies>

        <!-- JavaFX  -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>${controlsfx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kordamp.bootstrapfx</groupId>
            <artifactId>bootstrapfx-core</artifactId>
            <version>${bootstrapfx-core.version}</version>
        </dependency>

        <!-- Pi4J  -->
        <!-- Pi4J Core -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-core</artifactId>
            <version>${pi4j.version}</version>
        </dependency>


        <!-- Pi4J Raspberry Pi Platform -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-raspberrypi</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <!-- Pi4J Raspberry Pi GPIO -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-pigpio</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-linuxfs</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <!-- Pi4J Mock Platform
             Not scoped to just tests because it is also used when the app is run on a desktop environment-->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-mock</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <!--Logging: All logging is done with SLF4J, even in the absorbed mbelling
            WS281x library (was manually transferred from pi4j). It is the conflicting logging
            dependencies that caused a problem  at runtime and that's why the
            jar is NOT used but instead the code is absorbed into this very project -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
            <scope>test</scope>
        </dependency>


        <!-- JUnit -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- for checkstyle -->
        <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>${checkstyle.version}</version>
        </dependency>

        <!-- Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito-core.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <plugins>
            <!-- JAVA COMPILER -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <verbose>false</verbose>
                </configuration>
            </plugin>
            <!-- to make the site lifecylce work-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
            </plugin>
            <!-- testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>

            <!-- code coverage with jacoco -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.gluonhq</groupId>
                <artifactId>gluonfx-maven-plugin</artifactId>
                <version>${gluonfx.plugin.version}</version>
                <configuration>
                    <target>
                        <gluonfx.target>host</gluonfx.target>
                    </target>
                    <mainClass>${launcher.class}</mainClass>
                    <releaseConfiguration>
                        <vendor>Pi4J</vendor>
                        <description>${app.description}</description>
                        <skipSigning>true</skipSigning>
                    </releaseConfiguration>
                </configuration>
            </plugin>

            <!-- DEFAULT JAR EXECUTABLE CLASS -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>java</executable>
                    <arguments>
                        <argument>--module-path</argument>
                        <argument>${project.build.directory}/distribution</argument>
                        <argument>--module</argument>
                        <argument>${launcher.class}</argument>
                    </arguments>
                </configuration>
            </plugin>
            <!-- Copy runtime dependencies into distribution folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <!--
                            On the Raspberry Pi we use specific JavaFX dependencies, so we exclude them here.
                            -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build final JAR file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>ch.ladestation.connectncharge.AppStarter</mainClass>
                        </manifest>
                    </archive>
                    <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>${launcher.class}</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle.version}</version>
                <executions>
                    <execution>
                        <id>verify-style</id>
                        <phase>test</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <configLocation>src/main/config/connectncharge_checks.xml</configLocation>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <violationSeverity>warning</violationSeverity>
                    <excludes>${maven-checkstyle-plugin.excludes}</excludes>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${puppycrawl-tools-checkstyle.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>

            <!-- configure project info plugin-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
                <configuration>
                    <goal>index</goal>
                    <customBundle>${project.basedir}/src/site/custom/index.properties</customBundle>
                </configuration>
            </plugin>

            <!-- Javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <configuration>
                    <additionalOptions>
                        <additionalOption>-tag</additionalOption>
                        <additionalOption>"implSpec:a:Implementation Requirements:"</additionalOption>
                    </additionalOptions>
                    <bottom>Copyright © 2023 Team Ladestation</bottom>
                    <doctitle>${project.name}</doctitle>
                    <excludePackageNames>${maven-javadoc-plugin.excludePackageNames}</excludePackageNames>
                    <additionalDependencies>
                        <!-- JavaFX  -->
                        <dependency>
                            <groupId>org.openjfx</groupId>
                            <artifactId>javafx-controls</artifactId>
                            <version>${javafx.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.openjfx</groupId>
                            <artifactId>javafx-fxml</artifactId>
                            <version>${javafx.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.controlsfx</groupId>
                            <artifactId>controlsfx</artifactId>
                            <version>${controlsfx.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.kordamp.bootstrapfx</groupId>
                            <artifactId>bootstrapfx-core</artifactId>
                            <version>${bootstrapfx-core.version}</version>
                        </dependency>
                    </additionalDependencies>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>javadoc</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!--configure jacoco plugin report-->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <!-- select non-aggregate reports -->
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!-- checksytle report-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>src/main/config/connectncharge_checks.xml</configLocation>
                    <linkXRef>false</linkXRef>
                    <excludes>${maven-checkstyle-plugin.excludes}</excludes>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>checkstyle</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <profile>
            <id>jfx-remote-run-kiosk</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}" username="${pi.username}"
                                                 password="${pi.password}" trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>
                                                />
                                            </fileset>
                                        </scp>

                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}" username="${pi.username}"
                                                 password="${pi.password}" trust="true" failonerror="false"
                                                 usepty="true" useSystemIn="true" suppresssystemerr="true"
                                                 suppresssystemout="true" command="sudo killall -9 java"/>

                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}" username="${pi.username}"
                                                 password="${pi.password}" trust="true" failonerror="false"
                                                 usepty="true" useSystemIn="true"
                                                 command="sudo  java-kiosk  ${pi.remote.jvmOptions} -Xmx1G --module-path ${pi.deploydirectory} --module ${launcher.class} -Dmonocle.cursor.enabled=${pi.drm.enable.cursor}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>jfx-remote-run-X11</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}" username="${pi.username}"
                                                 password="${pi.password}" trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>
                                                />
                                            </fileset>
                                        </scp>

                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}" username="${pi.username}"
                                                 password="${pi.password}" trust="true" failonerror="false"
                                                 usepty="true" useSystemIn="true" suppresssystemerr="true"
                                                 suppresssystemout="true" command="sudo killall -9 java"/>

                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}" username="${pi.username}"
                                                 password="${pi.password}" trust="true" failonerror="false"
                                                 usepty="true" useSystemIn="true"
                                                 command="DISPLAY=:0 XAUTHORITY=/home/pi/.Xauthority sudo -E java ${pi.remote.jvmOptions} --module-path /opt/javafx-sdk/lib:${pi.deploydirectory} --add-modules javafx.controls -Dglass.platform=gtk --module ${launcher.class}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Activate JDWP server on CrowPi, can be used for local and remote runs -->
        <profile>
            <id>debug</id>
            <properties>
                <pi.remote.jvmOptions>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
                </pi.remote.jvmOptions>
            </properties>
        </profile>
        <profile>
            <id>desktop</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <gluonfx.target>host</gluonfx.target>
            </properties>
        </profile>
        <profile>
            <id>pi</id>
            <properties>
                <gluonfx.target>linux-aarch64</gluonfx.target>
            </properties>
        </profile>
    </profiles>
</project>